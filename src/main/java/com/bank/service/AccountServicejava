package com.bank.service;

import com.bank.model.Account;
import com.bank.model.StatementEntry;
import com.bank.repository.AccountRepository;
import com.bank.repository.StatementEntryRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class AccountService {
    private final AccountRepository accountRepo;
    private final StatementEntryRepository statementRepo;

    public AccountService(AccountRepository accountRepo, StatementEntryRepository statementRepo) {
        this.accountRepo = accountRepo;
        this.statementRepo = statementRepo;
    }

    public Account createAccount() {
        return accountRepo.save(new Account());
    }

    @Transactional
    public Account deposit(Long accountId, double amount) {
        if (amount <= 0) throw new IllegalArgumentException("Deposit must be positive");
        Account account = accountRepo.findById(accountId).orElseThrow();
        account.setBalance(account.getBalance() + amount);
        StatementEntry entry = new StatementEntry(LocalDateTime.now(), amount, account.getBalance(), account);
        statementRepo.save(entry);
        return accountRepo.save(account);
    }

    @Transactional
    public Account withdraw(Long accountId, double amount) {
        if (amount <= 0) throw new IllegalArgumentException("Withdrawal must be positive");
        Account account = accountRepo.findById(accountId).orElseThrow();
        if (account.getBalance() < amount) throw new IllegalArgumentException("Insufficient balance");
        account.setBalance(account.getBalance() - amount);
        StatementEntry entry = new StatementEntry(LocalDateTime.now(), -amount, account.getBalance(), account);
        statementRepo.save(entry);
        return accountRepo.save(account);
    }

    public List<StatementEntry> getStatement(Long accountId) {
        return statementRepo.findByAccountIdOrderByDateAsc(accountId);
    }
}